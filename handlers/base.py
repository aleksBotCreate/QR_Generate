import os

from aiogram import Router, types, filters, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext

from data.callbacks import ColorData
from keyboards import inline
from utils.qr import create_code

user_router = Router()


@user_router.message(filters.CommandStart())
async def command_start(event: types.Message, state: FSMContext):
    data = await state.get_data()
    await delete_reply(event, data)
    await state.clear()

    text = 'üëã –ü—Ä–∏–≤–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å. –¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ <b>QR –∫–æ–¥–æ–≤</b>.\n\n' \
           'üìë –ü—Ä–æ—Å—Ç–æ <b>–ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —Å–ø—Ä—è—Ç–∞—Ç—å –≤ QR –∫–æ–¥ –∏ —è –ø—Ä–∏—à–ª—é –µ–≥–æ —Ç–µ–±–µ.\n\n' \
           '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ telegram –±–æ—Ç–æ–≤: @aleksBotCreate_channel'
    await event.answer(text=text)


@user_router.message(F.content_type == ContentType.TEXT)
async def create_qr_code(event: types.Message, state: FSMContext):
    data = await state.get_data()
    await delete_reply(event, data)
    await state.clear()

    path = create_code(event.html_text, '#000000')
    photo = types.FSInputFile(path)
    caption = '‚úÖ –¢–≤–æ–π QR –∫–æ–¥ —Å–æ–∑–¥–∞–Ω.\n' \
              'üé® –¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∫–æ–¥, –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –Ω–∞ –Ω–∏–∂–µ!\n\n' \
              '–ù—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω? –°–∫–æ—Ä–µ–µ –ø—Ä–∏—Å—ã–ª–∞–π —Ç–µ–∫—Å—Ç –¥–ª—è qr –∫–æ–¥–∞.'
    kb = inline.get_color_code()
    msg = await event.answer_photo(photo=photo, caption=caption, reply_markup=kb)

    await state.set_data({'data': event.html_text, 'msg_id': msg.message_id})

    os.remove(path)


@user_router.message()
async def qr_error(event: types.Message, state: FSMContext):
    data = await state.get_data()
    await delete_reply(event, data)
    await state.clear()

    text = '‚ùå –£–ø—Å... –Ø –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å QR –∫–æ–¥. –ü–æ–º–Ω–∏—Ç–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
    await event.answer(text=text)


@user_router.callback_query(ColorData.filter())
async def get_color_code(event: types.CallbackQuery, callback_data: ColorData, state: FSMContext):
    data = await state.get_data()
    await delete_reply(event, data)
    await state.clear()

    path = create_code(data['data'], callback_data.color)
    photo = types.FSInputFile(path)
    caption = '‚úÖ –¢–≤–æ–π QR –∫–æ–¥ —Å–æ–∑–¥–∞–Ω.\n' \
              'üé® –¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∫–æ–¥, –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –Ω–∞ –Ω–∏–∂–µ!\n\n' \
              '–ù—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω? –°–∫–æ—Ä–µ–µ –ø—Ä–∏—Å—ã–ª–∞–π —Ç–µ–∫—Å—Ç –¥–ª—è qr –∫–æ–¥–∞.'
    kb = inline.get_color_code()
    msg = await event.message.answer_photo(photo=photo, caption=caption, reply_markup=kb)

    await state.set_data({'data': data['data'], 'msg_id': msg.message_id})

    os.remove(path)


async def delete_reply(event, data):
    try:
        await event.bot.edit_message_reply_markup(chat_id=event.from_user.id, message_id=data['msg_id'])
    except:
        pass

    return
